name: Build Tetris C++ Game

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y libsdl2-dev g++ libsdl2-ttf-dev

    - name: Build the project
      run: |
        make clean
        make

    - name: Run binary (headless test)
      run: |
        echo "Skipping actual execution since SDL2 requires display"
    - name: Notify Discord after a run
      if: always()
      run: |
        status="${{ job.status }}"
        if [ "$status" = "success" ]; then
          emoji="‚úÖ"
          msg="Tetris build succeeded"
        else
          emoji="‚ùå"
          msg="Tetris build failed"
        fi
        curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \"$emoji $msg: $status on branch ${{ github.ref_name }} by ${{ github.actor }}.\"}" \
          "${{ secrets.DISCORD_WEBHOOK }}"

  create-release:
    needs: build-linux
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create a release note file
          echo "Automated release for commit ${{ github.sha }}" > release_notes.txt
          echo "" >> release_notes.txt
          echo "Changes in this release:" >> release_notes.txt
          echo "${{ github.event.head_commit.message }}" >> release_notes.txt
          
          # Create tag
          git tag v${{ steps.get_version.outputs.date }}-${{ steps.get_version.outputs.short_sha }}
          git push origin v${{ steps.get_version.outputs.date }}-${{ steps.get_version.outputs.short_sha }}
          
          # Create the GitHub release using gh CLI
          release_url=$(gh release create v${{ steps.get_version.outputs.date }}-${{ steps.get_version.outputs.short_sha }} \
            --title "Release ${{ steps.get_version.outputs.date }}" \
            --notes-file release_notes.txt \
            --repo ${{ github.repository }} \
            --target ${{ github.ref_name }})
            
          # Save the release URL for later steps
          echo "RELEASE_URL=${release_url}" >> $GITHUB_ENV

      - name: Build the project for release
        run: |
          make clean
          make

      - name: Upload Release Asset
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload v${{ steps.get_version.outputs.date }}-${{ steps.get_version.outputs.short_sha }} ./tetris \
            --repo ${{ github.repository }}
          
      - name: Notify Discord about successful release
        if: success()
        run: |
          version="v${{ steps.get_version.outputs.date }}-${{ steps.get_version.outputs.short_sha }}"
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"üöÄ **New Tetris Release**: ${version} is now available! [Download here](${RELEASE_URL})\n\nChanges in this release:\n${{ github.event.head_commit.message }}\"}" \
            "${{ secrets.DISCORD_WEBHOOK }}"
            
      - name: Notify Discord about release failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"‚ùå **Release Creation Failed**: The attempt to create a new release for commit ${{ github.sha }} on branch ${{ github.ref_name }} by ${{ github.actor }} has failed. Please check the [GitHub Actions logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\"}" \
            "${{ secrets.DISCORD_WEBHOOK }}"
